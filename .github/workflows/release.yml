# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release Version'
        required: true

jobs:
  release:

    runs-on: ubuntu-latest
    env:
      INSTALL4J_DIR: "install4j/install4j8.0.8"

    steps:
      - uses: actions/checkout@v2

          #      - name: Cache Install4j
          #        id: cache-install4j
          #        uses: actions/cache@v2.1.3
          #        with:
          #          path: $HOME/$INSTALL4J_DIR
          #          key: $INSTALL4J_DIR

      #      - name: Cache Bundled JRE
      #        id: cache-jre
      #        uses: actions/cache@v2.1.3
      #        with:
      #          path: $HOME/.install4j8/jres/windows-amd64-15.0.1.tar.gz
      #          key: 15.0.1
      
      - name: Check Version Tag
        id: tag_check
        run: |
          if [[ ${{ github.event.inputs.version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo ::set-output name=major_release::true
          fi

      - name: Set up JDK 15
        uses: actions/setup-java@v1
        with:
          java-version: 15.0.1
          java-package: jdk+fx

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Checks
        run: xvfb-run --auto-servernum ./gradlew --stacktrace -PjavafxPlatform=linux check
        env:
          JAVA_TOOL_OPTIONS: "-Dprism.verbose=true -Dprism.order=sw"

      - name: Download Install4j
        #        if: steps.cache-install4j.outputs.cache-hit != 'true'
        run: |
            mkdir -p "$HOME/install4j"
            curl https://download-gcdn.ej-technologies.com/install4j/install4j_unix_8_0_8.tar.gz -o "$HOME/install4j/install4j8.tar.gz"
            tar xzf "$HOME/install4j/install4j8.tar.gz" -C "$HOME/install4j"

      - name: Download Bundled JRE
        #        if: steps.cache-jre.outputs.cache-hit != 'true'
        run: |
            mkdir -p "$HOME/.install4j8/jres/"
            curl https://content.faforever.com/jre/windows-amd64-15.0.1.tar.gz -o "$HOME/.install4j8/jres/windows-amd64-15.0.1.tar.gz"

      - name: Build Windows Files
        run: |
          ./gradlew -Pversion="${{ github.event.inputs.version }}" \
          -PjavafxPlatform=win \
          -Pinstall4jHomeDir=$HOME/$INSTALL4J_DIR \
          -Pinstall4jLicense=${{ secrets.INSTALL4J_LICENSE }} \
          --info \
          --stacktrace \
          buildInstall4jMediaFiles

      - name: Build Linux Files
        run: |
          ./gradlew -Pversion="${{ github.event.inputs.version }}" \
          -PjavafxPlatform=linux \
          -Pinstall4jHomeDir=$HOME/$INSTALL4J_DIR \
          -Pinstall4jLicense=${{ secrets.INSTALL4J_LICENSE }} \
          --stacktrace \
          buildInstall4jMediaFiles

      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: v${{ github.event.inputs.version }}
          draft: true
          prerelease: true

      - name: Get Artifact Paths
        id: artifact_paths
        run: |
          LINUX_TAR=$(ls build/install4j/dfc_unix_*.tar.gz | head -n 1)
          LINUX_TAR_NAME=$(basename $LINUX_TAR)
          WINDOWS_EXE=$(ls build/install4j/dfc_windows-x64_*.exe | head -n 1)
          WINDOWS_EXE_NAME=$(basename $WINDOWS_EXE)
          WINDOWS_ZIP=$(ls build/install4j/dfc_windows-x64_*.zip | head -n 1)
          WINDOWS_ZIP_NAME=$(basename $WINDOWS_ZIP)
          EXE_PATH=$(dirname $WINDOWS_EXE)/
          echo ::set-output name=EXE_PATH::${EXE_PATH}
          echo ::set-output name=LINUX_TAR::${LINUX_TAR}
          echo ::set-output name=LINUX_TAR_NAME::${LINUX_TAR_NAME}
          echo ::set-output name=WINDOWS_EXE::${WINDOWS_EXE}
          echo ::set-output name=WINDOWS_EXE_NAME::${WINDOWS_EXE_NAME}
          echo ::set-output name=WINDOWS_ZIP::${WINDOWS_ZIP}
          echo ::set-output name=WINDOWS_ZIP_NAME::${WINDOWS_ZIP_NAME}

      - name: Upload Linux Files
        id: upload-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.artifact_paths.outputs.LINUX_TAR }}
          asset_name: ${{ steps.artifact_paths.outputs.LINUX_TAR_NAME }}
          asset_content_type: application/gzip

      - name: Upload Windows exe
        id: upload-exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.artifact_paths.outputs.WINDOWS_EXE }}
          asset_name: ${{ steps.artifact_paths.outputs.WINDOWS_EXE_NAME }}
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Windows zip
        id: upload-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.artifact_paths.outputs.WINDOWS_ZIP }}
          asset_name: ${{ steps.artifact_paths.outputs.WINDOWS_ZIP_NAME }}
          asset_content_type: application/zip
          
      - name: Upload to Mirror
        if: steps.tag_check.outputs.major_release == 'true'
        uses: bayssmekanique/action-simple-file-upload@v1
        with:
          user: ${{ secrets.FTP_MIRROR_USERNAME }}
          password: ${{ secrets.FTP_MIRROR_PASSWORD }}
          host: ${{ secrets.FTP_MIRROR_HOST }}
          src: ${{ steps.artifact_paths.outputs.WINDOWS_EXE }}
          dest: ${{ steps.artifact_paths.outputs.WINDOWS_EXE_NAME }}

    
      
