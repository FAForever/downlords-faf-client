import co.riiid.gradle.ReleaseTask
import com.install4j.gradle.Install4jTask
import de.undercouch.gradle.tasks.download.Download
import groovy.json.JsonSlurper
import groovyx.net.http.ContentType
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.Method
import groovyx.net.http.ParserRegistry

buildscript {
  repositories {
    mavenCentral()
    maven { url 'http://maven.ej-technologies.com/repository' }
    maven { url 'http://repo.spring.io/plugins-release' }
  }

  dependencies {
    classpath("org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0")
    classpath("com.install4j:gradle-plugin:6.0")
    classpath("org.springframework.build.gradle:propdeps-plugin:${propdepsVersion}")
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

plugins {
  id "com.install4j.gradle" version "6.1.1"
  id "co.riiid.gradle" version "0.4.2"
  id "de.undercouch.download" version "3.2.0"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'propdeps'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'distribution'


sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

version = '0.7.3-alpha'

compileJava.dependsOn(processResources)
processResources {
  filesMatching('**/application.yml') {
    filter {
      it.replace('#faf-server.version#', project.version.toString())
    }
  }
}

configurations {
  compile.exclude module: "assertj-core"
}

class HttpBuilder extends HTTPBuilder {

  public HttpBuilder(String url) {
    super(url)
    this.parser.'text/json' = { resp ->
      def bufferedText = resp.entity.content.getText(ParserRegistry.getCharset(resp)).trim()
      return new JsonSlurper().parseText(bufferedText)
    }
    this.parser.'application/json' = this.parser.'text/json'
  }
}

def httpRequest(Method method, String url, onSuccess) {
  def http = new HttpBuilder(url)

  http.request(method) {
    requestContentType = ContentType.JSON

    headers.'User-Agent' = 'downlords-faf-client-gradle'
    headers.'Authorization' = "token ${project.github.token}"
    headers.'Accept' = 'application/vnd.github.v3+json'

    response.success = onSuccess

    response.failure = { resp, json ->
      logger.debug 'Response headers: \n' + resp.headers.collect { "< $it" }.join('\n')
      def errorMessage = json ? json.message : resp.statusLine
      def ref = json ? "See $json.documentation_url" : ''
      def errorDetails = json && json.errors ? "Details: " + json.errors.collect { it }.join('\n') : ''
      throw new GradleScriptException("$errorMessage. $ref. $errorDetails", null)
    }
  }
}

def buildReleaseBody() {
  def GITHUB_BASE_URL = "https://api.github.com/repos/FAForever/downlords-faf-client"
  def versionString = "v" + project.version

  def milestones
  httpRequest(Method.GET, "${GITHUB_BASE_URL}/milestones?state=all", { resp, json ->
    milestones = json
  })

  if (milestones == null) throw new GradleException("Milestones could not be loaded")

  def milestoneNumber
  for (Object milestone : milestones) {
    if (versionString == milestone.title) {
      milestoneNumber = milestone.number
    }
  }

  if (milestoneNumber == null) throw new GradleException("No such milestone: " + versionString)

  def body = ""
  httpRequest(Method.GET, "${GITHUB_BASE_URL}/issues?state=closed&sort=created&direction=asc&milestone=${milestoneNumber}", { resp, json ->
    for (Object issue : json) {
      body += "* Fixed #${issue.number}: ${issue.title}\n"
    }
  })

  return body
}

def buildAssetList() {
  return file("build/install4j").list(new FilenameFilter() {
    @Override
    boolean accept(File dir, String name) {
      return name =~ /\.exe/
    }
  }).collect({ file -> "build/install4j/${file}" })
}

jacocoTestReport {
  reports {
    xml.enabled = true
  }
}

configurations {
  codacy
}

jar {
  manifest {
    attributes "Premain-Class": "com.faforever.client.fx.TransparentWebViewPatch",
        "Main-Class": "com.faforever.client.Main",
        "Implementation-Title": "Downlord's FAF Client",
        "Implementation-Version": version,
        "Implementation-Vendor": "Downlord"
  }
}

distributions {
  main {
    contents {
      from {
        [
            configurations.runtime,
            file('src/main/native'),
            jar,
            unpackIceAdapter.outputs.files,
            downloadUnixUid.outputs.files,
            downloadWindowsUid.outputs.files
        ]
      }
    }
  }
}

install4j {
  if (project.hasProperty('install4jHomeDir')) {
    installDir = file(install4jHomeDir)
  }
}

task buildInstaller(type: Install4jTask) {
  description 'Creates the application installer using Install4j'
  dependsOn 'clean'
  dependsOn 'jar'
  dependsOn 'installDist'

  projectFile = file('downlords-faf-client.install4j')
  release = version

  doFirst {
    if (!project.hasProperty('install4jHomeDir')) {
      throw new RuntimeException('Specify install4jHomeDir in gradle.properties and set it to an install4j installation directory')
    }
  }
}

task githubRelease(type: ReleaseTask, overwrite: true) {
  description 'Creates a new release on Github and closes the according milestone'
  dependsOn 'buildInstaller'

  doFirst {
    project.github {
      owner = 'FAForever'
      repo = 'downlords-faf-client'
      token = System.properties['githubAccessToken']
      tagName = "v" + project.version
      name = "v" + project.version
      prerelease = project.version =~ /alpha|beta|RC/
      body = buildReleaseBody()
      assets = buildAssetList()
    }
  }
}

task downloadIceAdapter(type: Download) {
  src "https://github.com/FAForever/ice-adapter/releases/download/v${faf_ice_adapter_version}/faf-ice-adapter.zip"
  dest file("${buildDir}/tmp/faf-ice-adapter.zip")
  onlyIfNewer true
}

task unpackIceAdapter(type: Copy, dependsOn: downloadIceAdapter) {
  group "native dependencies"
  from zipTree(downloadIceAdapter.outputs.files.singleFile)
  into file("${buildDir}/resources/native")
}

task downloadUnixUid(type: Download, dependsOn: unpackIceAdapter) {
  group "native dependencies"
  src "https://github.com/FAForever/uid/releases/download/v${faf_uid_version}/faf-uid"
  dest file("${buildDir}/resources/native")
  onlyIfNewer true
}

task downloadWindowsUid(type: Download, dependsOn: unpackIceAdapter) {
  group "native dependencies"
  src "https://github.com/FAForever/uid/releases/download/v${faf_uid_version}/faf-uid.exe"
  dest file("${buildDir}/resources/native")
  onlyIfNewer true
}

task downloadNativeDependencies(dependsOn: [unpackIceAdapter, downloadUnixUid, downloadWindowsUid]) {
  group "native dependencies"
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.5'
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
  main = "com.codacy.CodacyCoverageReporter"
  classpath = configurations.codacy
  args = ["-l", "Java", "-r", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"]
}

repositories {
  mavenCentral()
  jcenter()
  maven { url "https://jitpack.io" }
  maven { url "http://dl.bintray.com/typesafe/maven-releases" }
}

jacoco {
  toolVersion = "0.7.5.201505241946"
}

dependencyManagement {
  dependencies {
    dependency "org.mockito:mockito-core:${mockitoVersion}"
  }
}

dependencies {
  compile("org.springframework.boot:spring-boot-starter")
  compile("org.springframework.boot:spring-boot-starter-cache")
  compile("org.springframework.boot:spring-boot-starter-logging")
  compile("org.springframework.security.oauth:spring-security-oauth2")
  compile("org.springframework:spring-web")

  compile("com.github.FAForever:faf-java-commons:${fafCommonsVersion}")
  compile("com.google.code.gson:gson:2.3.1")
  compile("org.pircbotx:pircbotx:2.1") {
    exclude module: 'guava'
  }
  compile("com.google.guava:guava:18.0")
  compile("org.apache.commons:commons-compress:1.9")
  compile("net.java.dev.jna:jna:4.2.1")
  compile("net.java.dev.jna:jna-platform:4.2.1")
  compile("org.eclipse.jgit:org.eclipse.jgit:4.5.0.201609210915-r")
  compile("org.jetbrains:annotations:13.0")
  compile("net.sf.jtidy:jtidy:r938")
  compile("com.neovisionaries:nv-i18n:1.15")
  compile("com.rometools:rome:1.5.0")
  compile("org.jsoup:jsoup:1.8.2")
  compile("com.nativelibs4java:bridj:0.7.0")
  compile("com.github.nocatch:nocatch:1.1")
  compile("org.luaj:luaj-jse:3.0.1")
  compile("commons-validator:commons-validator:1.5.1")
  compile("com.github.micheljung:JJsonRpc:01a7fba5f4")
  compile("javax.inject:javax.inject:1")
  compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonDatatypeJsr310Version}")
  compile("org.projectlombok:lombok:${lombokVersion}")
  compile("com.github.rutledgepaulv:q-builders:${qBuildersVersion}")
  compile("com.github.nsp:JSkills:${jSkillsVersion}")
  compile("com.github.jasminb:jsonapi-converter:${jsonapiConverterVersion}")

  testCompile 'junit:junit:4.11'
  testCompile("org.testfx:testfx-core:4.0.+") {
    exclude module: 'guava'
  }
  testCompile("org.testfx:testfx-junit:4.0.+")
  testCompile("com.natpryce.hamcrest:hamcrest-reflection:0.1-2")
  testCompile("org.springframework.boot:spring-boot-starter-test")

  optional("org.springframework.boot:spring-boot-configuration-processor")

  codacy("com.github.codacy:codacy-coverage-reporter:-SNAPSHOT")
}
